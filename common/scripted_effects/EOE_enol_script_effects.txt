EOE_battle_big_rewards = {
	optimize_memory
	owner = {
		random_list = {
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_1
				}
				set_country_flag = EOE_tech9_1
				add_research_option = tech_EOE_nuclear_star 
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_2
				}
				set_country_flag = EOE_tech9_2
				add_research_option = tech_EOE_radioactive_acid
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_3
				}
				set_country_flag = EOE_tech9_3
				add_research_option = tech_EOE_fairy_beam 
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_4
				}
				set_country_flag = EOE_tech9_4
				add_research_option =tech_EOE_nuclear_beam
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_5
				}
				set_country_flag = EOE_tech9_5
				add_research_option = tech_EOE_evolite 
				
			}
		}
	}
}

EOE_battle_medium_rewards = {
	optimize_memory
	owner = {
		random_list = {
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_1
				}
				set_country_flag = EOE_tech9_1
				add_research_option = tech_EOE_nuclear_star 
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_2
				}
				set_country_flag = EOE_tech9_2
				add_research_option = tech_EOE_radioactive_acid
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_3
				}
				set_country_flag = EOE_tech9_3
				add_research_option = tech_EOE_fairy_beam 
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_4
				}
				set_country_flag = EOE_tech9_4
				add_research_option =tech_EOE_nuclear_beam
				
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = EOE_tech9_5
				}
				set_country_flag = EOE_tech9_5
				add_research_option = tech_EOE_evolite 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_1
				}
				set_country_flag = EOE_tech7_1
				add_research_option = tech_EOE_bullet_seed
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_2
				}
				set_country_flag = EOE_tech7_2
				add_research_option = tech_EOE_razor_leaf 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_3
				}
				set_country_flag = EOE_tech7_3
				add_research_option = tech_EOE_double_edge 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_4
				}
				set_country_flag = EOE_tech7_4
				add_research_option = tech_EOE_flare_blitz
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_5
				}
				set_country_flag = EOE_tech7_5
				add_research_option = tech_EOE_calm_mind
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_6
				}
				set_country_flag = EOE_tech7_6
				add_research_option = tech_EOE_fairy_star
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_7
				}
				set_country_flag = EOE_tech7_7
				add_research_option = tech_EOE_swift 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_8
				}
				set_country_flag = EOE_tech7_8
				add_research_option = tech_EOE_aurora_beam
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_9
				}
				set_country_flag = EOE_tech7_9
				add_research_option = tech_EOE_thunder_bolt 
				
			}
		}
	}
	
}
EOE_battle_small_rewards = {
	optimize_memory
	owner = {
		random_list = {
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_1
				}
				set_country_flag = EOE_tech7_1
				add_research_option = tech_EOE_bullet_seed
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_2
				}
				set_country_flag = EOE_tech7_2
				add_research_option = tech_EOE_razor_leaf 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_3
				}
				set_country_flag = EOE_tech7_3
				add_research_option = tech_EOE_double_edge 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_4
				}
				set_country_flag = EOE_tech7_4
				add_research_option = tech_EOE_flare_blitz
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_5
				}
				set_country_flag = EOE_tech7_5
				add_research_option = tech_EOE_calm_mind
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_6
				}
				set_country_flag = EOE_tech7_6
				add_research_option = tech_EOE_fairy_star
			
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_7
				}
				set_country_flag = EOE_tech7_7
				add_research_option = tech_EOE_swift 
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_8
				}
				set_country_flag = EOE_tech7_8
				add_research_option = tech_EOE_aurora_beam
				
			}
			5 = {
				modifier = {
					factor = 0
					has_country_flag = EOE_tech7_9
				}
				set_country_flag = EOE_tech7_9
				add_research_option = tech_EOE_thunder_bolt 
				
			}
		}
	}
}

EOE_spawn_protoss_shroud_planet = {
	optimize_memory
	random_system = {
		limit = {
			distance = {
				source = root
				min_jumps = 1
				max_jumps = 12
			}
			has_access_fleet = root.owner
			has_owner = no
		}
		random_system_planet = {
			limit = {
				OR = {
					is_planet_class = pc_molten
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_frozen 
					is_planet_class = pc_toxic
				}
				has_anomaly = no
			}
			change_pc = pc_shrouded
			set_planet_flag = EOE_protoss_shroud_planet
		}
	}
}

EOE_damage_fluctuation = {
	optimize_memory
	reroll_random = yes
	random_list = {
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.9
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.91
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.92
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.93
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.94
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.95
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.96
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.97
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.98
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 0.99
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1.01
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1.02
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1.03
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1.04
			}
		}
		1 = {
			multiply_variable = {
				which = EOE_$x$_dmg
				value = 1.05
			}
		}
	}
}

EOE_nolight_deposit = {
	# random_list = {
	# 	1 = { add_deposit = d_society_10 }
	# 	1 = { add_deposit = d_engineering_10 }
	# 	1 = { add_deposit = d_physics_10 }
	# }
}
#留个样板罢了，其实根本没用到
EOE_assimilation_effect = {
	optimize_memory
	random_owned_pop_group = {
		limit = {
			has_citizenship_type = {
				type = EOE_citizenship_assimilation
				country = root.owner
			}
		}
		if = { # eeveeassimilator
			limit = {
				root.owner = {
					OR = {
					 has_civic = civic_eeveelutions_assimilator
					}
				}
			}
			kill_pop = yes
			root.owner = {
				generate_cyborg_treats = yes #蠢驴你塞效果的地方真阴间东一个西一个哼啊啊啊啊啊啊啊啊啊啊啊啊啊啊
			}
			if = {
				limit = {
					OR = {
						root = {
							OR = {
								is_planet_class = pc_gaia
								is_planet_class = pc_relic
								is_planet_class = pc_city
								is_planet_class = pc_EOE_city
								is_planet_class = pc_EOE_pokemon_gaia
								is_planet_class = pc_machine
								is_planet_class = pc_habitat
								is_planet_class = pc_ringworld_habitable
								is_ideal_planet_class = {
									who = root.owner
									status = yes
								}
							}
						}
						root.owner = {
							has_trait = trait_normal_type_mega_evolution
						}
					}
				}
				root = {
					create_pop = {
						species = root.owner
						ethos = root.owner
					}
					owner = {
						if = {
							limit = { has_ascension_perk = ap_become_the_crisis }
							complete_crisis_objective = crisobj_purge_pops
						}
					}
				}
			}
		}
		else = {
			modify_species = {
				species = root.owner
				ideal_planet_class = root
				effect = {
					save_event_target_as = EOE_assim_species
				}
			}
			root = {
				create_pop = {
					species = event_target:EOE_assim_species
					ethos = root.owner
				}
				owner = {
					if = {
						limit = { has_ascension_perk = ap_become_the_crisis }
						complete_crisis_objective = crisobj_purge_pops
					}
				}
			}
		}
	}
}

#更新了一下环开
EOE_shatterring_start_buildings = {
	optimize_memory
	if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}
		add_deposit = d_unsupervised_settlement
	}

	else_if = {
		limit = {
			owner = {
				has_authority = auth_hive_mind
			}
		}
		add_deposit = d_collapsed_burrows
	}

	else = {
		add_deposit = d_decrepit_dwellings
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOT = {
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
			}
		}

		if = {
			limit = {
				owner = {
					last_created_species = { is_lithoid = yes }
				}
			}
			owner = {
				set_country_flag = lithoid_subspecies
			}
		}
		else = {
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}
	}

	if = {
		limit = {
			owner = { is_regular_empire = yes }
		}
		add_modifier = {
			modifier = EOE_pop_unemploy days = 60
		}
		# 21 - 2 = 19 jobs
		add_district = district_rw_city#3职员,2执法,但是两个执法被我砍到障碍里去了
		add_district = district_rw_urban_1
		add_district = district_rw_urban_2
		add_zone = {
			district = district_rw_city
			zone = zone_industrial
			zone_slot = slot_rw_urban_01
			replace = yes
		}
		add_zone = {
			district = district_rw_urban_1
			zone = zone_rw_energy
			zone_slot = slot_rw_urban_01
			replace = yes
		}
		add_zone = {
			district = district_rw_urban_2
			zone = zone_rw_food
			zone_slot = slot_rw_urban_01
			replace = yes
		}
		#暂时没有适配岩石系宝可梦捏
		#开局一般是28个人

		#下面3+2+2+2=9 9+19=28 哦不，简直完美
		# 3 jobs
		add_building = building_capital #2政客1执法

		# 2 jobs
		if = {
			limit = { owner = { is_spiritualist = no } }
			add_building = building_bureaucratic_1
		}

		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					OR = {
						has_valid_civic = civic_death_cult
						has_valid_civic = civic_death_cult_corporate
					}
				}
			}
			add_building = building_sacrificial_temple_1
		}

		if = {
			limit = {
				owner = {
					is_spiritualist = yes
					NOT = { has_valid_civic = civic_death_cult }
				}
			}
			add_building = building_temple
		}

		# 2 jobs
		if = {
			limit = {
				owner = {
					is_low_tech_start = no
				}
			}
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_reanimated_armies
					}
				}
				add_building = building_dread_encampment

				solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
					random_system_planet = {
						limit = {
							has_deposit_for = shipclass_research_station
							has_deposit = d_engineering_5
						}
						# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
						add_deposit = d_engineering_10
					}
				}
			}
			else = {
				add_building = building_research_lab_1
			}
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_permanent_employment
				}
			}
			add_building = building_posthumous_employment_center
		}
		# 2-3 jobs
		if = {
			limit = {
				owner = {
					NOT = { has_valid_civic = civic_agrarian_idyll }
				}
			}
			if = {
				limit = {
					owner = {
						is_spiritualist = no
						has_valid_civic = civic_pleasure_seekers
					}
				}
				add_building = building_holo_theatres
				
			}
			else_if = {
				limit = {
					owner = {
						is_spiritualist = yes
						OR = {
							has_valid_civic = civic_death_cult
							has_valid_civic = civic_death_cult_corporate
						}
					}
				}
				add_building = building_sacrificial_temple_1
				
			}
			else_if = {
				limit = {
					owner = {
						is_megacorp = no
						is_spiritualist = yes
					}
				}
				add_building = building_temple
				
			}
			else = {
				add_building = building_commercial_zone
			}
		}
	}

	if = {
		limit = {
			owner = { is_hive_empire = yes }
		}

		# 9 jobs
		add_district = district_rw_hive
		add_district = district_rw_farming
		add_district = district_rw_industrial


		# 5 jobs
		add_building = building_hive_capital

		# 2 jobs
		if = {
			limit = {
				owner = {
					is_low_tech_start = no
				}
			}
			add_building = building_research_lab_1
		}

		# 2 jobs
		add_building = building_hive_node

		# 1 job
		if = {
			limit = {
				owner = { has_origin = origin_progenitor_hive }
			}
			add_building = building_offspring_nest
		}
		else = {
			add_building = building_spawning_pool
		}

		# 1 job
		add_building = building_hive_warren
	}

	# Replace capital building for machine empires
	if = {
		limit = { owner = { is_machine_empire = yes } }
		add_district = district_rw_nexus
		add_district = district_rw_generator
		add_district = district_rw_industrial
		# total - 27 jobs


		# 6 jobs
		add_building = building_machine_capital

		# 1 job
		add_building = building_machine_assembly_plant

		# 2 job
		if = {
			limit = { owner = { NOT = { has_valid_civic = civic_machine_servitor } } }
			add_building = building_uplink_node
		}

		# 2 jobs
		if = {
			limit = {
				owner = {
					is_low_tech_start = no
				}
			}
			add_building = building_research_lab_1
		}



		#Servitors
		if = {
			limit = { owner = { has_civic = civic_machine_servitor } }
		
			add_building = building_organic_sanctuary
		}
	}
}

destroy_star_system_necrozma = {
	if = {
		limit = { exists = event_target:crisis_country }
		fire_on_action = {
			on_action = on_destroy_star_system
			scopes = { from = event_target:crisis_country }
		}
	}
	else = {
		fire_on_action = { on_action = on_destroy_star_system }
	}
	set_star_flag = star_cracked
	set_star_class = sc_black_drawf
	every_system_ambient_object = {
		limit = {
			# Preserve Unbidden crisis effects
			NOR = {
				has_ambient_object_flag = extradimensional_system_effect
				has_ambient_object_flag = extradimensional_system_effect_2
			}
		}
		destroy_ambient_object = this
	}
	every_system_planet = {
		limit = { is_star = yes }
		create_ambient_object = {
			type = "star_explosion"
			play_animation_once = yes
			location = this
		}
		last_created_ambient_object = {
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
		change_pc = pc_black_drawf
	}
	# Handle Contingency Machine Worlds
	every_system_planet = {
		limit = {
			is_planet_class = pc_ai
			NOT = { has_planet_flag = machine_lair }
		}
		destroy_machine_world = yes
	}
	random_system_planet = {
		limit = {
			is_planet_class = pc_ai
			has_planet_flag = machine_lair
		}
		from.owner = { save_event_target_as = final_machine_world_destroyer }
		stop_crisis_sound = yes
		planet_event = { id = crisis.2046 }
	}
	every_system_planet = {
		limit = {
			is_star = no
			is_asteroid = no
			NOR = {
				is_planet_class = pc_shattered
				is_planet_class = pc_shattered_2
				is_planet_class = pc_shielded
				is_planet_class = pc_ringworld_habitable_damaged
				is_planet_class = pc_ringworld_tech_damaged
				is_planet_class = pc_ringworld_seam_damaged
			}
		}
		if = {
			limit = { is_planet_class = pc_habitat } # uncolonized
			spawn_habitat_cracker_effect = yes
		}
		if = {
			limit = { is_colony = yes }
			if = {
				limit = {
					exists = orbital_defence
				}
				destroy_fleet = orbital_defence
			}
			remove_all_buildings = yes
			destroy_colony = yes
			if = {
				limit = { is_planet_class = pc_habitat }
				spawn_habitat_cracker_effect = yes
			}
			else_if = {
				limit = { is_ringworld = yes }
				spawn_ringworld_cracker_effect = yes
				change_pc = pc_ringworld_habitable_damaged
			}
			else = {
				change_pc = pc_EOE_nolight
				set_planet_size = 4
			}
		}
		else_if = {
			limit = { is_ringworld = yes }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_habitable_damaged
		}
		else_if = {
			limit = { is_planet_class = pc_ringworld_tech }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_tech_damaged
		}
		else_if = {
			limit = { is_planet_class = pc_ringworld_seam }
			spawn_ringworld_cracker_effect = yes
			change_pc = pc_ringworld_seam_damaged
		}
		else = {
			change_pc = pc_EOE_nolight
			set_planet_size = 4
		}
	}
	every_system_planet = {
		limit = {
			exists = orbital_station
		}
		orbital_station = { dismantle = yes }
	}
	every_system_planet = {
		clear_deposits = yes
		clear_planet_modifiers = yes
		prevent_anomaly = yes
	}
	every_system_planet = {
		limit = { is_asteroid = yes }
		clear_deposits = yes
	}
	every_fleet_in_system = {
		limit = {
			NOR = {
				is_same_value = from
				# except Extradimensionals
				AND = {
					exists = owner
					owner = {
						OR = {
							is_country_type = portal_holder
							is_country_type = extradimensional
							is_country_type = extradimensional_2
							is_country_type = extradimensional_3
						}
					}
				}
			}
		}
		if = {
			limit = {
				exists = event_target:crisis_country #i.e. not final destruction of all matter
				is_mobile = yes
			}
			set_mia = mia_return_home
		}
		else = {
			destroy_fleet = this
		}
	}
	every_system_megastructure = {
		set_ruined_megastructure = yes
	}
	star = {
		create_ambient_object = {
			type = "destroyed_system"
			location = this
		}
		last_created_ambient_object = {
			set_ambient_object_flag = destroyed_system_effect
			set_location = {
				target = prev
				distance = 0
				angle = random
			}
		}
	}
}


EOE_create_ultra_system = {
	no_scope = {
		spawn_system = {
			min_distance = 563
			max_distance = 563
			min_orientation_angle = 90
			max_orientation_angle = 180
			initializer = EOE_ultra_system
			hyperlane = no
		}
		last_created_system = {
			save_global_event_target_as = EOE_ultra_space_system
			isolate_system = yes
		}
	}
}